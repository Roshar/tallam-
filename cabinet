const mysql = require('mysql2/promise')
const bcrypt = require('bcryptjs')
const { v4: uuidv4 } = require('uuid'); 

/**
 * ######################  SELECT ROWS IN SQL #################################
 * ############################################################################
 */

/** GET ALL AREA  */

exports.getAllArea = async function () {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const [res, fields] = await dbh.execute('SELECT * FROM area')

      dbh.end()
      return res;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/** GET ALL TYPIES */

exports.getTypes = async function () {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const [res, fields] = await dbh.execute('SELECT * FROM type_school')

      dbh.end()
      return res;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/** GET SCHOOL BY AREA ID (FROM AREA ID) */

exports.getSchoolsByAreaId = async function (req, res) {
   try {
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })
      
      const area_id = await req.id;
      const [result, fields] = await dbh.execute('SELECT * FROM schools WHERE area_id = ?',[area_id])

      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/** GET USER BY EMAIL (FOR CHECKING UNIQUE EMAIL) */

exports.getUserByEmail = async (req, res) => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const email = await req.email;
      const [result, fields] = await dbh.execute('SELECT * FROM users WHERE email = ?',[email])

      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }

}

/** END BLOCK ----------------------------------------  */



/** GET LEVEL EDUCATION  */

exports.getLevelEdu = async () => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const [res, fields] = await dbh.execute('SELECT * FROM edu_level')

      dbh.end()
      return res;
   }catch(e) {
      console.log(e.message)
   }
   
}

/** END GET LEVEL EDUCATION */



/** GET ALL SCHOOLS PROFILE */
//LIMITED 10 ROWS LAST ADDED SCHOOLS

exports.getAllSchoolProfiles = async () => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const [res, fields] = await dbh.execute('SELECT * FROM schools LIMIT 10')

      dbh.end()
      return res;
   }catch(e) {
      console.log(e.message)
   }
   
}

/** END BLOCK ----------------------------------------  */



/** GET ALL SCHOOLS WITH AREAS TITLES */

exports.getAllSchoolWithAreas = async () => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const [res, fields] = await dbh.execute('SELECT schools.id_school, schools.area_id, schools.fullname, schools.short_name, schools.type_id, area.id_area, area.title_area FROM schools INNER JOIN area ON schools.area_id = area.id_area')

      dbh.end()
      return res;
   }catch(e) {
      console.log(e.message)
   }
   
}

/** END BLOCK ----------------------------------------  */



/** GET GENDER */

exports.getGenders = async () => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const [res, fields] = await dbh.execute('SELECT * FROM gender')

      dbh.end()
      return res;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/**  POSITION LIST */

exports.getPositionList = async () => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const [res, fields] = await dbh.execute('SELECT * FROM position')

      dbh.end()
      return res;
   }catch(e) {
      console.log(e.message)
   }
   
}

/** END BLOCK ----------------------------------------  */



/**  DISICPLINES LIST */

exports.getdisciplinesList = async () => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const [res, fields] = await dbh.execute('SELECT * FROM discipline_title')

      dbh.end()
      return res;
   }catch(e) {
      console.log(e.message)
   }
   
}

/** END BLOCK ----------------------------------------  */



/**  DISICPLINES LIST */

exports.getCategories = async () => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const [res, fields] = await dbh.execute('SELECT * FROM category')

      dbh.end()
      return res;
   }catch(e) {
      console.log(e.message)
   }
   
}

/** END BLOCK ----------------------------------------  */



/** SCHOOL PROFILE */

exports.getSchoolProfileById = async (req,res) => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const id_school = await req.id;
      const [result, fields] = await dbh.execute("SELECT *  FROM `schools` INNER JOIN `area` ON schools.area_id = area.id_area WHERE id_school = ?", [id_school])

      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }
   
}

/** END BLOCK ----------------------------------------  */



/** GET PROJECTS IN USE THIS SCHOOL */

exports.getAllProjectsWithThisSchool = async (req,res) => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const school_id = await req.id;
      const [result, fields] = await dbh.execute("SELECT * FROM  `middleware_project_school` " + 
      "INNER JOIN `projects`  ON middleware_project_school.project_id = projects.id_project WHERE school_id = ?", [school_id])

      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }
}
/** END BLOCK ----------------------------------------  */



/** GET ALL TEACHERS FROM THIS SCHOOL BY SCHOOL ID */

exports.getAllTeachersFromThisSchool = async (req,res) => {

   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const school_id = await req.id;
      const [result, fields] = await dbh.execute("SELECT teachers.id_teacher, teachers.surname, teachers.firstname, teachers.patronymic, teachers.phone, teachers.email,"+
      "position.title_position FROM  `table_members` " + 
      "INNER JOIN `teachers`  ON table_members.teacher_id = teachers.id_teacher " +
      "INNER JOIN `position` ON teachers.position = position.id_position "+
      "WHERE table_members.school_id = ?", [school_id])

   dbh.end()
   return result;

   }catch(e) {
      console.log(e)
   }  
}

/** END BLOCK ----------------------------------------  */



/** GET PROFILE INFORMATION TEACHER BY ID */

exports.getProfileByTeacherId = async (req, res) => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const school_id = await req.id;
      const teacher_id = await req.teacher_id;
      const [result, fields] = await dbh.execute("SELECT teachers.id_teacher, teachers.surname, "+
      "teachers.firstname, teachers.patronymic, teachers.birthday, teachers.snils, teachers.gender_id, teachers.specialty,  "+
      "teachers.level_of_education_id, teachers.diploma, teachers.position, teachers.total_experience, teachers.teaching_experience, teachers.category_id, teachers.phone, teachers.email, teachers.avatar, "+
      "position.title_position, edu_level.title_edu_level, category.title_category, gender.id_gender, gender.gender_title "+
      "FROM  `teachers` " + 
      "INNER JOIN `position` ON teachers.position = position.id_position "+
      "INNER JOIN `edu_level` ON teachers.level_of_education_id = edu_level.id_edu_level "+
      "INNER JOIN `category` ON teachers.category_id = category.id_category "+
      "INNER JOIN `gender` ON teachers.gender_id = gender.id_gender "+
      "WHERE teachers.id_teacher = ?", [teacher_id]);

   dbh.end()
   return result;

   }catch(e) {
      console.log(e)
   }
}

/** END BLOCK ----------------------------------------  */



/** GET INFORMATION ABOUT KPK TEACHER BY ID TEACHER  */

exports.getAllKpkByIdTeacher = async(req, res) => {
   try {
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const teacher_id = await req.teacher_id
      const [result, fields2] = await dbh.execute('SELECT * FROM training_kpk WHERE teacher_id = ?', [teacher_id])
     
      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/** GET TEACHER DISCIPLINES (ALL) BY TEACHER ID  */

exports.getTeacherDisciplines = async(req, res) => {
   try {
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const teacher_id = await req.teacher_id
      const [result, fields2] = await dbh.execute('SELECT * FROM `discipline_middleware` '+
      ' INNER JOIN `discipline_title` ON discipline_middleware.discipline_id = discipline_title.id_discipline'+
      ' WHERE discipline_middleware.teacher_id = ?', [teacher_id])
     
      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */


///////////////////////////////////////// PROJECTS //////////////////////////////////

/** GET ALL PROJECTS FOR ADMIN PANEL */

exports.getAllProjects = async function () {
   const dbh = await mysql.createConnection({
      host: process.env.DATABASE_HOST,
      user: process.env.DATABASE_USER,
      database: process.env.DATABASE,
      password: process.env.DATABASE_PASSWORD,
      socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
   })
   const [res, fields] = await dbh.execute('SELECT * FROM projects WHERE id_project > 1')
   dbh.end()
   console.log('model finished')
   return res;
}
/** END BLOCK ----------------------------------------  */



/** GET PROJECTS WHAT USE THIS TEACHER (ALL)  */

exports.getTeacherProjects = async(req, res) => {
   try {
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const teacher_id = await req.teacher_id
      const [result, fields2] = await dbh.execute('SELECT  table_members.project_id, projects.name_project, projects.id_project FROM `table_members` '+
      ' INNER JOIN `projects` ON table_members.project_id = projects.id_project'+
      ' WHERE table_members.teacher_id = ?', [teacher_id])
     
      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/** GET ALL SCHOLS WITH AREA FROM PROJECT BY PROJECT ID  */

exports.getAllSchoolsFromThisProjects = async (req, res) => {
   try {
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const project_id = await req.id;

      const [result, fields2] = await dbh.execute('SELECT  schools.id_school, schools.fullname, schools.short_name, schools.type_id, schools.area_id, area.title_area, type_school.title_type ' +
      ' FROM `schools` '+
      ' INNER JOIN `middleware_project_school` ON schools.id_school = middleware_project_school.school_id '+
      ' INNER JOIN `area` ON schools.area_id  = area.id_area '+
      ' INNER JOIN `type_school` ON schools.type_id = type_school.id_type '+
      ' WHERE middleware_project_school.project_id = ?', [project_id])
     
      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/** GET PROJECT INFO BY PROJECT ID  */

exports.getInfoFromProjectById = async (req, res) => {

   try {
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const project_id = await req;

      const [result, fields2] = await dbh.execute('SELECT  * FROM projects WHERE id_project = ? ', [project_id])
     
      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/** GET TOTAL VALUE TEACHERS FROM PROJECT BY PROJECT ID   */

exports.getTotalValueTeacherFromProject = async (req, res) => {
   try {
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const project_id = await req.id;

      //const [result, fields2] = await dbh.execute('SELECT  table_members.teacher_id, table_members.school_id FROM table_members WHERE project_id = ? ', [project_id])
      const [result, fields] = await dbh.execute(' SELECT COUNT(*) as count FROM  table_members WHERE project_id = ? ', [project_id])
   
      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/** GET TOTAL VALUE SCHOOLS FROM PROJECT BY PROJECT ID   */

exports.getTotalValueSchoolFromProject = async (req, res) => {
   try {
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const project_id = await req.id;

      //const [result, fields2] = await dbh.execute('SELECT  table_members.teacher_id, table_members.school_id FROM table_members WHERE project_id = ? ', [project_id])
      const [result, fields] = await dbh.execute(' SELECT COUNT(DISTINCT school_id) as count FROM middleware_project_school  WHERE project_id = ? ', [project_id])
   
      dbh.end()
      return result;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */


/**
 * ######################  INSERT ROWS IN SQL #################################
 * ############################################################################
 */

/** CREATE NEW CABINET  */

exports.createNewCabinet = async (req, res) => {
   try {
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const email = await req.email;
      const password = await req.password;
      const area = await req.area;
      const school = await req.school;
      const hashPassword = await bcrypt.hash(password, 7)
      const id_user = '12222';
      // console.log(req)
      // return true
      // console.log(req)
      // return true
      const [result, fields] = await dbh.execute('INSERT INTO users (id_user, email, password, school_id) VALUES (?,?,?,?)',[id_user, email, hashPassword, school])
   
      dbh.end()
      return result.insertId;
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/** CREATE NEW SCHOOL (NOT CABINET) */

exports.addNewSchool = async (req, res) => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const id = uuidv4()
      const fullname = await req.fullname;
      const short_name = await req.short_name;
      const area_id = await req.area_id;
      const type_id = await req.type_id;
      
      const [result, fields] = 
      await dbh.execute('INSERT INTO schools (id_school,area_id, fullname, short_name, type_id) VALUES (?,?,?,?,?)',
      [id, area_id, fullname, short_name,  type_id])

      dbh.end()
      return result.insertId;
   }catch(e) {
      console.log(e.message)
   }

}

/** END BLOCK ----------------------------------------  */



/** CREATE A NEW TEACHER IN THIS SCHOOL  */

exports.addNewTeacher = async (req, res) => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      /** sql for teachers table */
      const id_teacher = await req.id_teacher || 22;
      const surname = await req.surname || 'не найден';
      const firstname = await req.firstname || 'не найден';
      const patronymic = await req.patronymic || 'Без отчества';
      const birthday = await req.birthday || '0000-00-00';
      const snils = await req.snils || 000000000;
      const gender_id = await req.gender_id || 22;
      const specialty = await req.specialty || 'не найден';
      const level_of_education_id = await req.level_of_education_id || 22;
      const diploma = await req.diploma || "Б/Н";
      const position = await req.position || 22;
      const total_experience = await req.total_experience || 22;
      const teaching_experience = await req.teaching_experience || 22;
      const category = await req.category || 22;
      const phone = await req.phone || 'Б/Н';
      const email = await req.email || 'Б/Н';
      /** sql for discipline table */
      const disciplines_id = await req.disciplines;
      /** sql for training_kpk table */
      const place_kpk = await req.place_kpk || 'нет данных';
      const year_kpk = await req.year_kpk || 'нет данных';
      /** sql for table_members table */
      const school_id = await req.school_id;
      const project_id = await req.project_id;
      
      const [result, fields] = 
      await dbh.execute('INSERT INTO teachers (id_teacher, surname, firstname, patronymic, birthday, snils, gender_id, specialty, level_of_education_id, diploma, position, total_experience, teaching_experience, category_id, phone,	email) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
      [id_teacher, surname,firstname, patronymic, birthday, snils, gender_id, specialty,level_of_education_id, diploma, position, total_experience, teaching_experience, category, phone,	email ])
   
            const [result2 , fields2] =  await dbh.execute('INSERT INTO table_members (teacher_id, school_id,	project_id) VALUES (?,?,?)',
            [id_teacher, school_id, project_id])
          
      
            const [result3 , fields3] =  await dbh.execute('INSERT INTO training_kpk (year_training, place_training, teacher_id) VALUES (?,?,?)',
            [year_kpk,  place_kpk, id_teacher])
      
            
            for (let i = 0; i < disciplines_id.length; i++) {
               const [result4, fields4] =  await dbh.execute('INSERT INTO discipline_middleware ( teacher_id,	discipline_id) VALUES (?,?)',
               [id_teacher, disciplines_id[i]])
               }

      dbh.end()
      return result.insertId;
      
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */



/**
 * ######################  UPDATE ROWS IN SQL #################################
 * ############################################################################
 */

/** UPDATE  MAIN INFORMATION TEACHERS'S  BY TEACHER ID*/
exports.updateTeacherMainInformationById  = async (req, res) =>{
   try {
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })
      
      const id_teacher = await req.id_teacher;
      const surname = await req.surname;
      const firstname = await req.firstname;
      const patronymic = await req.patronymic
      const birthday = await req.birthday;
      const snils = await req.snils;
      const gender_id = await req.gender_id;
      const specialty = await req.specialty;
      const level_of_education_id = await req.level_of_education_id;
      const diploma = await req.diploma;
      const position = await req.position;
      const total_experience = await req.total_experience;
      const teaching_experience = await req.teaching_experience;
      const category = await req.category;
      const phone = await req.phone;
      const email = await req.email;

      const [result, fields] = 
      await dbh.execute("UPDATE `teachers` SET surname = ?, firstname = ?, patronymic = ?,"+
      "birthday = ?,snils = ?, gender_id = ?, specialty = ?, level_of_education_id = ?,"+
      "diploma= ?, position = ?, total_experience = ?,teaching_experience = ?, category_id = ?,"+
      "phone = ?, email = ?  WHERE  id_teacher = ?  ",
      [surname, 
      firstname, 
      patronymic,
      birthday,
      snils,
      gender_id,
      specialty,
      level_of_education_id,
      diploma,
      position,
      total_experience,
      teaching_experience,
      category,
      phone,
      email,
      id_teacher])

      dbh.end()
      return result;

   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */


/**
 * ######################  DELETE ROWS IN SQL #################################
 * ############################################################################
 */

 /** UPDATE  MAIN INFORMATION TEACHERS'S  BY TEACHER ID*/

exports.deleteTeacherProfileById = async(req , res) => {
   try{
      const dbh = await mysql.createConnection({
         host: process.env.DATABASE_HOST,
         port: process.env.DATABASE_PORT,
         user: process.env.DATABASE_USER,
         database: process.env.DATABASE,
         password: process.env.DATABASE_PASSWORD,
         socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock'
      })

      const teacher_id = await req.teacher_id;
      const school_id = await req.school_id;

      if(!teacher_id ||  !school_id) {
         throw new Error('Неверне параментры! Какой то из параментров отсутствует!')
      }else {
         const [result, fields] = 
         await dbh.execute('DELETE FROM `teachers` WHERE id_teacher = ?',
         [teacher_id])

         const [result2, fields2] = await dbh.execute('DELETE FROM `training_kpk` WHERE teacher_id = ?',
         [teacher_id])

         const [result3, fields3] = await dbh.execute('DELETE FROM `table_members` WHERE teacher_id = ?',
         [teacher_id])

         const [result4, fields4] = await dbh.execute('DELETE FROM `discipline_middleware` WHERE teacher_id = ?',
         [teacher_id])
   
         dbh.end()
         return result;
      }
      
      
   }catch(e) {
      console.log(e.message)
   }
}

/** END BLOCK ----------------------------------------  */
 